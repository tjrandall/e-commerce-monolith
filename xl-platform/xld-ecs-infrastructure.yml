apiVersion: xl-deploy/v1beta1
kind: Applications
spec:
- name: ecommerce-monolith
  type: core.Directory
  children:
    - name: ecommerce-monolith-ecs-fargate-cluster
      type: udm.Application
      children:
      - name: '1.0'
        type: udm.DeploymentPackage
        deployables:
# ECS cluster (no instances, FARGATE only)
        - name: ecommerce-monolith-ecs-cluster
          type: aws.ecs.ClusterSpec
          clusterName: '{{username}}-ecommerce-monolith-ecs-cluster'
          region: '{{region}}'

# Networking
        - name: ecommerce-monolith-ecs-vpc
          type: aws.vpc.VPCSpec
          vpcName: '{{username}}-ecommerce-monolith-ecs-vpc'
          region: '{{region}}'
          cidrBlock: 10.0.0.0/16
          createInternetGateway: true
          internetGatewayName: '{{username}}-ecommerce-monolith-ecs-igw'
        - name: ecommerce-monolith-ecs-subnet-ipv4-az-1a
          type: aws.vpc.SubnetSpec
          subnetName: '{{username}}-ecommerce-monolith-ecs-subnet-ipv4-az-1a'
          region: '{{region}}'
          availabilityZone: '{{region}}a'
          vpc: 'Name:{{username}}-ecommerce-monolith-ecs-vpc'
          cidrBlock: 10.0.0.0/24
        - name: ecommerce-monolith-ecs-subnet-ipv4-az-1b
          type: aws.vpc.SubnetSpec
          subnetName: '{{username}}-ecommerce-monolith-ecs-subnet-ipv4-az-1b'
          region: '{{region}}'
          availabilityZone: '{{region}}b'
          vpc: 'Name:{{username}}-ecommerce-monolith-ecs-vpc'
          cidrBlock: 10.0.1.0/24
        - name: ecommerce-monolith-ecs-route-table
          type: aws.vpc.RouteTableSpec
          routeTableName: '{{username}}-ecommerce-monolith-ecs-route-table'
          region: '{{region}}'
          vpc: 'Name:{{username}}-ecommerce-monolith-ecs-vpc'
          is_main: true
          subnets:
          - 'Name:{{username}}-ecommerce-monolith-ecs-subnet-ipv4-az-1a'
          - 'Name:{{username}}-ecommerce-monolith-ecs-subnet-ipv4-az-1b'
          routes:
          - name: route1
            type: aws.vpc.RouteSpec
            ipv4Address: 0.0.0.0/0
            gatewayId: 'Name:{{username}}-ecommerce-monolith-ecs-igw'
# Security
        - name: ecommerce-monolith-ecs-security-group
          type: aws.vpc.SecurityGroupSpec
          securityGroupName: '{{username}}-ecommerce-monolith-ecs-security-group'
          description: Created by XL Deploy
          region: '{{region}}'
          vpc: 'Name:{{username}}-ecommerce-monolith-ecs-vpc'
          inboundRules:
          - name: inbound
            type: aws.vpc.SecurityGroupInboundRuleSpec
            protocol: -1
            portRange: 22
            source: 0.0.0.0/0

# Loadbalancer
        - name: ecommerce-monolith-targetgroup
          type: aws.elb.TargetGroupSpec
          targetName: ecommerce-monolith-targetgroup
          targetType: ip
          region: '{{region}}'
          vpc: 'Name:{{username}}-ecommerce-monolith-ecs-vpc'
          protocol: http
          port: 80
          healthCheckInterval: 30
        - name: ecommerce-monolith-ecs-alb
          type: aws.elb.ApplicationELBSpec
          loadBalancerName: ecommerce-monolith-ecs-alb
          region: '{{region}}'
          scheme: internet-facing
          listeners:
          - name: ecommerce-monolith-ecs-alb-listener
            type: aws.elb.ApplicationListenerSpec
            protocol: http
            port: 80
            targetGroup: ecommerce-monolith-targetgroup
          subnets:
          - 'Name:{{username}}-ecommerce-monolith-ecs-subnet-ipv4-az-1a'
          - 'Name:{{username}}-ecommerce-monolith-ecs-subnet-ipv4-az-1b'
          securityGroups:
          - 'Name:{{username}}-ecommerce-monolith-ecs-security-group'
          boundTemplates:
          - "../ecommerce-monolith-ecs-alb-dictionary"
# RDS Database
        - name: ecommerce-monolith-ecs-db-subnet-group
          description: DB subnet group
          type: aws.rds.DBSubnetGroupSpec
          subnetGroupName: '{{username}}-ecommerce-monolith-ecs-db-subnet-group'
          region: '{{region}}'
          subnets:
          - 'Name:{{username}}-ecommerce-monolith-ecs-subnet-ipv4-az-1a'
          - 'Name:{{username}}-ecommerce-monolith-ecs-subnet-ipv4-az-1b'
        - name: ecommerce-monolith-mysql-db
          type: aws.rds.DBInstanceSpec
          region: '{{region}}'
          engine: mysql # aurora-mysql is a better choice but the XLD AWS plugin doesnt support provisioning DBCluster which is required for this
          multiAZ: true
          licenseModel: general-public-license
          allocatedStorage: 20
          dbInstanceClass: db.t2.small
          dbInstanceIdentifier: store-mysql-db
          dbSubnetGroupName: '{{username}}-ecommerce-monolith-ecs-db-subnet-group'
          vpcSecurityGroupIds:
          - 'Name:{{username}}-ecommerce-monolith-ecs-security-group'
          dbName: store
          masterUsername: store
          masterUserPassword: XebiaLabs2018 # this is not secure, this needs to be put in to AWS SSM and read from the application
          boundTemplates:
          - "../ecommerce-monolith-ecs-dictionary"
        templates:
        - name: ecommerce-monolith-ecs-dictionary
          type: template.udm.Dictionary
          entries:
            MYSQL_DB_ADDRESS: '{{%address%}}'
            MYSQL_DB_PORT: '{{%finalPort%}}'
        - name: ecommerce-monolith-ecs-alb-dictionary
          type: template.udm.Dictionary
          entries:
            ALB_DNS_NAME: '{{%dnsName%}}'
